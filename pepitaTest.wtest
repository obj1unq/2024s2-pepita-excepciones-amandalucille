import pepita.*

describe "Pepon tests"{

  test "Pepon con energia 30 al comer alpiste queda en 40"{
    pepon.comer(alpiste)
    assert.equals(40, pepon.energia())
  }
    
  test "Pepon con energia 30 al volar 3km queda con energia 4"{
    pepon.volar(3)
    assert.equals(4, pepon.energia())
  }


}

describe "Roque tests"{

  test "Roque alimento 0 veces a su ave a entrenar al principio"{
    roque.ave(pepon)
    assert.equals(0, roque.cenas())
  }
  
  test "Roque entranado a Pepon con energia 30 al alimentar el alpiste pepon queda con 40 y cenas es 1"{
    roque.ave(pepon)
    roque.alimentar(alpiste)
    assert.equals(40, pepon.energia())
    assert.equals(1, roque.cenas())
  }
    
  test "Roque entrenando a pepita con energia 100 y recibe el mensaje alimentar(alpiste) pepita queda con 120 de energ√≠a."{
    roque.ave(pepita)
    roque.alimentar(alpiste)
    assert.equals(120, pepita.energia())
    assert.equals(1, roque.cenas())
  }

}

describe "Milena Movilizar y volar demas"{
  test "Milena con Pepita y Pepon, no puede movilizar porque pepon no puede volar 6km"{
    assert.notThat(pepon.puedeVolar(6))    
    
    assert.throwsExceptionWithMessage("No puede movilizar a todas sus aves!", { milena.movilizar(6) })
    assert.equals(100, pepita.energia())
    assert.equals(30, pepon.energia())
  }
}


   
   
